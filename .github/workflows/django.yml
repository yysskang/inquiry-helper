name: Django CI - Build and Push Docker Image

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  ECR_REPOSITORY: ${{ secrets.ECR }}

permissions:
  id-token: write
  contents: read   

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-action
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can 
        docker build --build-arg ENVIRONMENT=${{ secrets.ARG_ENVIRONMENT}} --build-arg ACCESS_KEY=${{ secrets.ARG_AWS_ACCESS_KEY}} --build-arg SECRET_KEY=${{ secrets.ARG_AWS_SECRET_KEY}} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Update ECS service for new version
      run: |
        # Save the task definition to a file
        aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} > task_definition.json
        # Update the image tag in the task definition file
        cat <<< "$(jq '.taskDefinition.containerDefinitions[0].image = "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR }}:${{ github.sha }}"' task_definition.json)" > task_definition.json
        # Extract and save the tags
        TAGS=$(jq '.tags' task_definition.json)
        # Clean up the task definition file
        cat <<< $(jq '.taskDefinition' task_definition.json) > task_definition.json
        cat <<< $(jq 'del(.requiresAttributes)' task_definition.json) > task_definition.json
        cat <<< $(jq 'del(.compatibilities)' task_definition.json) > task_definition.json
        sed -i '/taskDefinitionArn/d' task_definition.json
        sed -i '/revision/d' task_definition.json
        sed -i '/status/d' task_definition.json
        sed -i '/registeredAt/d' task_definition.json
        sed -i '/registeredBy/d' task_definition.json
        sed -i 's/"memory": "2048",/"memory": "2048"/g' task_definition.json

        # Check if tags exist and add them if they do
        if [ "$(echo $TAGS | jq '. | length')" -gt 0 ]; then
          cat <<< $(jq '.tags = []' task_definition.json) > task_definition.json
          KEY=( $(echo $TAGS | jq '.[] | .key'))
          VALUE=( $(echo $TAGS | jq '.[] | .value'))
          NEW_KEY=( $(echo ${KEY[@]//\"/}))
          NEW_VALUE=( $(echo ${VALUE[@]//\"/}))
          COUNT=$(echo ${#NEW_KEY[@]})
          for (( c=0; c<$COUNT; c++)); do 
            cat <<< $(jq --arg sk "${NEW_KEY[c]}" --arg v "${NEW_VALUE[c]}" '.tags += [{"key":($sk), "value": $v}]' task_definition.json) > task_definition.json  
          done
        fi

        # Register the new task definition
        aws ecs register-task-definition --cli-input-json file://task_definition.json
        # Get the new revision number
        REVISION=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query 'taskDefinition.revision')
        # Update the ECS service with the new task definition revision
        aws ecs update-service --service ${{ secrets.ECS_SERVICE }} --cluster ${{ secrets.ECS_CLUSTER }} --force-new-deployment --task-definition ${{ secrets.ECS_TASK_DEFINITION }}:$REVISION
        # Wait for the service to stabilize
        aws ecs wait services-stable --service ${{ secrets.ECS_SERVICE }} --cluster ${{ secrets.ECS_CLUSTER }}
