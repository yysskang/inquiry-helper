name: Django CI - Build, Push Docker Image -> Update ECS Service

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  ECR_REPOSITORY: ${{ secrets.ECR }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  

permissions:
  id-token: write
  contents: read   

jobs:
  build-and-push:
    name: Build, Push Docker Image, and Update ECS Service
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-action
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg ENVIRONMENT=${{ secrets.ARG_ENVIRONMENT}} --build-arg ACCESS_KEY=${{ secrets.ARG_AWS_ACCESS_KEY}} --build-arg SECRET_KEY=${{ secrets.ARG_AWS_SECRET_KEY}} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Update ecs service
      run: |
        # task definition file save 
        aws ecs describe-task-definition --include TAGS --task-definition $ECS_TASK_DEFINITION > $ECS_TASK_DEFINITION.json
        # 새로운 이미지로 image tag 변경
        cat <<< "$(jq '.taskDefinition.containerDefinitions[0].image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/$ECR_REPOSITORY:${{ github.sha }}"' $ECS_TASK_DEFINITION.json)" > $ECS_TASK_DEFINITION.json
        # # tag 저장
        TAGS=$(jq '.tags' $ECS_TASK_DEFINITION.json)
        # # 필요없는 내용 삭제 
        cat <<< $(jq '.taskDefinition' $ECS_TASK_DEFINITION.json) > $ECS_TASK_DEFINITION.json
        cat <<< $(jq 'del(.requiresAttributes)' $ECS_TASK_DEFINITION.json) > $ECS_TASK_DEFINITION.json
        cat <<< $(jq 'del(.compatibilities)' $ECS_TASK_DEFINITION.json) > $ECS_TASK_DEFINITION.json
        sed -i '/taskDefinitionArn/d' $ECS_TASK_DEFINITION.json
        sed -i '/revision/d' $ECS_TASK_DEFINITION.json
        sed -i '/status/d' $ECS_TASK_DEFINITION.json
        sed -i '/registeredAt/d' $ECS_TASK_DEFINITION.json
        sed -i '/registeredBy/d' $ECS_TASK_DEFINITION.json
        sed -i 's/"memory": "2048",/"memory": "2048"/g' $ECS_TASK_DEFINITION.json

        #tag 내용 저장 
        cat <<< $(jq '.tags = []' $ECS_TASK_DEFINITION.json) >  $ECS_TASK_DEFINITION.json
        KEY=( $(echo $TAGS | jq '.[] | .key'))
        VALUE=( $(echo $TAGS | jq '.[] | .value'))
        NEW_KEY=( $(echo ${KEY[@]//\"/}))
        NEW_VALUE=( $(echo ${VALUE[@]//\"/}))
        #tag 내용 추가
        COUNT=$(echo ${#NEW_KEY[@]})
        for (( c=0; c<$COUNT; c++)); do cat <<< $(jq --arg sk "${NEW_KEY[c]}" --arg v "${NEW_VALUE[c]}" '.tags += [{"key":($sk), "value": $v}]' $ECS_TASK_DEFINITION.json) > $ECS_TASK_DEFINITION.json  ;done
        #새로운 task 등록
        aws ecs register-task-definition --cli-input-json file://$ECS_TASK_DEFINITION.json
        # 새로운 revision 번호 저장
        REVISION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query 'taskDefinition.revision')
        # ECS 서비스 업데이트
        aws ecs update-service --service $ECS_SERVICE --cluster $ECS_CLUSTER --force-new-deployment --task-definition $ECS_TASK_DEFINITION:$REVISION
        # 서비스가 업데이트 될때까지 가다림
        aws ecs wait services-stable --service $ECS_SERVICE --cluster $ECS_CLUSTER
